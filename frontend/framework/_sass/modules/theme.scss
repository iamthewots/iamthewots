@use "./chroma.scss";
@use "./tools.scss";
@use "../wtk.scss";
@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

$color-properties: ("outline", "border", "background", "text", "shadow");
$reserved-color-names: "darkener", "lightener", "text-dark", "text-light";

@function get(
  $color-value,
  $lightness: 0%,
  $alpha: 1,
  $color-space: wtk.get("color-space")
) {
  $color-value: validate-color-value($color-value);
  $output-color: $color-value;
  $mixing-color: null;
  $lightness: math.clamp(-100%, $lightness, 100%);
  $alpha: math.clamp(0, $alpha, 1);
  $transparency: 100% - $alpha * 100%;

  @if ($lightness != 0%) {
    @if ($lightness > 0%) {
      $mixing-color: var(--color-lightener);
    } @else {
      $mixing-color: var(--color-darkener);
    }

    $mixing-percentage: math.abs($lightness);
    $output-color: color-mix(
      in $color-space,
      $output-color,
      $mixing-color $mixing-percentage
    );
  }

  @if ($transparency > 0%) {
    $output-color: color-mix(
      in $color-space,
      $output-color,
      transparent $transparency
    );
  }

  @return $output-color;
}

@function validate-color-name($color-name, $allow-reserved-names: false) {
  $color-name: string.to-lower-case(tools.remove-whitespaces($color-name));

  @if (list.index($reserved-color-names, $color-name) != null) {
    @if ($allow-reserved-names == false) {
      @error "Reserved color name.";
    }
  }

  @return $color-name;
}

@function validate-color-value($color-value) {
  @if (meta.type-of($color-value) == color) {
    @return $color-value;
  } @else if (meta.type-of($color-value) != string) {
    @error "Invalid color value.";
  }

  $string: tools.remove-whitespaces($color-value);

  @if (tools.is-css-var($string)) {
    $var-name: tools.extract-var-name($string);

    @if (string.index($var-name, "color") == 1) {
      @return $string;
    } @else {
      @error "Variable is not a theme color.";
    }
  } @else {
    @return var(--color-#{$string});
  }
}

@mixin add-color(
  $color-name,
  $color-value,
  $options: (),
  $override-reserved-color: false
) {
  $color-name: validate-color-name($color-name, $override-reserved-color);
  $color-value: validate-color-value($color-value);

  @if (meta.type-of($options) != map) {
    $options: ();
  }

  --color-#{$color-name}: #{$color-value};

  @each $key in "text", "contrast" {
    $value: map.get($options, $key);

    @if (
      meta.type-of($color-value) ==
        string and
        $value ==
        null and
        $key !=
        "contrast-text"
    ) {
      $var-name: tools.extract-var-name($color-value);
      $value: var(--#{$var-name}--#{$key});
    } @else if ($value == null) {
      @if ($key == "text") {
        @if (chroma.is-color-dark($color-value)) {
          $value: var(--color-text-light);
        } @else {
          $value: var(--color-text-dark);
        }
      }

      @if ($key == "contrast") {
        $value: color.invert($color-value);
      }
    } @else {
      $value: validate-color-value($value);
    }

    --color-#{$color-name}--#{$key}: #{$value};
  }
}
