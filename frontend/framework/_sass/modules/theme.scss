@use "./chroma.scss";
@use "./tools.scss";
@use "../wtk.scss";
@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

$color-space: wtk.get("color-space");
$color-properties: "shadow", "outline", "border", "background", "text";
$reserved-color-names: "darkener", "lightener", "text-dark", "text-light";
$default-color-options: (
  "text": (
    var(--color-text-light),
    var(--color-text-dark),
  ),
  "darkener": var(--color-darkener),
  "lightener": var(--color-lightener),
  "highlighter": (
    var(--color-lightener),
    var(--color-darkener),
  ),
);

@function change-color-alpha($color-value, $color-alpha: 1) {
  @if (meta.type-of($color-alpha) == string) {
    $color-alpha: wtk.get("opacity", $color-alpha);
  }

  @if ($color-alpha == 1) {
    @return $color-value;
  } @else if (meta.type-of($color-alpha) == number) {
    $color-alpha: math.clamp(0, $color-alpha, 1);
  } @else if (tools.is-css-var($color-alpha) == false) {
    @error "Unable to parse alpha from #{$color-alpha}.";
  }

  @return color-mix(
    in $color-space,
    $color-value,
    transparent calc(100% - $color-alpha * 100%)
  );
}

@function change-color-shade($color-value, $color-shade: 0%) {
  @if (meta.type-of($color-shade) == string) {
    $color-shade: wtk.get("color-shade", $color-shade);
  }

  @if ($color-shade == 0%) {
    @return $color-value;
  } @else if (meta.type-of($color-shade) == number) {
    $color-shade: math.clamp(-100%, $color-shade, 100%);
  } @else {
    @error "Unable to parse shade from #{$color-shade}.";
  }

  $mixing-color: var(--color-darkener);

  @if ($color-shade > 0%) {
    $mixing-color: var(--color-lightener);
  }

  @return color-mix(
    in $color-space,
    $color-value,
    $mixing-color math.abs($color-shade)
  );
}

@function extract-color-name($input-string) {
  $color-name: null;

  @if (is-css-var-a-theme-color($input-string)) {
    $css-var-name: tools.extract-css-var-name($input-string);
    $color-name: string.slice($css-var-name, 7);
  } @else if (meta.type-of($input-string) == string) {
    $color-name: validate-color-name($input-string);
  }

  @if ($color-name == null) {
    @error "Unable to extract color name from #{$input-string}.";
  }

  @return $color-name;
}

@function get-color($color-value, $color-shade: 0%, $color-alpha: 1) {
  @if (tools.is-of-type($color-value, color-mix) == false) {
    $color-value: validate-color-value($color-value);
  }

  $color-value: change-color-shade($color-value, $color-shade);
  $color-value: change-color-alpha($color-value, $color-alpha);

  @return $color-value;
}

@function is-css-var-a-theme-color($css-var) {
  @if (tools.is-css-var($css-var) == false) {
    @return false;
  }

  $css-var-name: tools.extract-css-var-name($css-var);

  @return string.index($css-var-name, "color-") == 1;
}

@function validate-color-name($input-string) {
  @if (meta.type-of($input-string) != string) {
    @error "Color name must be a string.";
  }

  @return string.to-lower-case(tools.remove-whitespaces($input-string));
}

@function is-valid-color-source($input-value) {
  @return meta.type-of($input-value) == color or meta.type-of($input-value) ==
    string;
}

@function validate-color-options($main-color-value, $input-value) {
  $color-options: ();

  @if (is-valid-color-source($input-value)) {
    $color-options: (
      "text": validate-color-value($input-value),
    );
  } @else if (meta.type-of($input-value) == map) {
    $color-options: $input-value;
  }

  @each $key, $default-value in $default-color-options {
    $value: map.get($color-options, $key);

    @if (is-valid-color-source($value)) {
      $value: validate-color-value($value);
    } @else {
      @if (meta.type-of($main-color-value) == color) {
        @if (list.length($default-value) == 1) {
          $value: $default-value;
        } @else {
          $dark-option: list.nth($default-value, 1);
          $light-option: list.nth($default-value, 2);

          @if (chroma.is-color-dark($main-color-value)) {
            $value: $dark-option;
          } @else {
            $value: $light-option;
          }
        }
      } @else {
        $main-color-name: extract-color-name($main-color-value);
        $value: var(--color-#{$main-color-name}--#{$key});
      }
    }

    $color-options: map.set($color-options, $key, $value);
  }

  @return $color-options;
}

@function validate-color-value($input-value) {
  @if (meta.type-of($input-value) == color) {
    @return $input-value;
  } @else if (meta.type-of($input-value) == string) {
    $color-name: extract-color-name($input-value);

    @return var(--color-#{$color-name});
  } @else {
    @error "Unable to parse color value from #{$input-value}.";
  }
}

@mixin add-color(
  $color-name,
  $color-value,
  $color-options: (),
  $override-reserved-color: false
) {
  $color-name: validate-color-name($color-name);
  $color-value: validate-color-value($color-value);
  $color-options: validate-color-options($color-value, $color-options);

  @if (
    list.index($reserved-color-names, $color-name) !=
      null and
      $override-reserved-color ==
      false
  ) {
    @error "#{$color-name} is a reserved color name.";
  }

  --color-#{$color-name}: #{$color-value};

  @each $key, $value in $color-options {
    --color-#{$color-name}--#{$key}: #{$value};
  }
}

@mixin add-color-scheme($color-base-name, $color-values-map) {
  $color-base-name: validate-color-name($color-base-name);

  @each $color-property in $color-properties {
    $color-name: "#{$color-base-name}-#{$color-property}";
    $input-value: map.get($color-values-map, $color-property);
    $color-value: $color-property;
    $color-options: ();

    @if (meta.type-of($color-value) == map) {
      $color-value: map.get($input-value, "color-value");
      $color-options: map.get($input-value, "color-options");
    } @else if (is-valid-color-source($input-value)) {
      $color-value: $input-value;
    }

    @include add-color($color-name, $color-value, $color-options, true);
  }
}

@mixin clone-color($color-value, $new-color-name) {
  @include add-color($new-color-name, $color-value, null, true);
}

@mixin set-color-property($color-property, $color-value) {
  @if (list.index($color-properties, $color-property) == null) {
    @error "Unrecognized or unsupported color property.";
  }

  $color-value: validate-color-value($color-value);

  @include clone-color($color-value, $color-property);

  @if ($color-property == "background") {
    background-color: var(--color-background);
    color: var(--color-background--text);
  } @else if ($color-property == "text") {
    color: var(--color-text);
  } @else if ($color-property != "shadow") {
    #{$color-property}-color: var(--color-#{$color-property});
  }
}

@mixin set-color-scheme($color-name) {
  $color-name: validate-color-name($color-name);

  @each $color-property in $color-properties {
    $property-color-name: "#{$color-name}-#{$color-property}";
    @include set-color-property($color-property, $property-color-name);
  }
}

@mixin use-color-classes($color-name, $requested-color-properties...) {
  @if (list.length($requested-color-properties) == 0) {
    $requested-color-properties: $color-properties;
  }

  @each $color-property in $requested-color-properties {
    .#{$color-property}-color-#{$color-name} {
      @include set-color-property($color-property, $color-name);
    }
  }
}
