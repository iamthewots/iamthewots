@use "./chroma.scss";
@use "./tools.scss";
@use "../wtk.scss";
@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

$color-space: wtk.get("color-space");
$color-properties: "shadow", "outline", "border", "background", "text";
$reserved-color-names: "darkener", "lightener", "text-dark", "text-light";

@function change-color-alpha($color-value, $input-alpha: 1) {
  @if (meta.type-of($input-alpha) == string) {
    $input-alpha: wtk.get("opacity", $input-alpha);
  }

  @if ($input-alpha == 1) {
    @return $color-value;
  } @else if (meta.type-of($input-alpha) == number) {
    $input-alpha: math.clamp(0, $input-alpha, 1);
  } @else if (tools.is-css-var($input-alpha) == false) {
    @error "Unable to parse alpha from #{$input-alpha}.";
  }

  @return color-mix(
    in $color-space,
    $color-value,
    transparent calc(100% - $input-alpha * 100%)
  );
}

@function change-color-shade($color-value, $input-shade: 0%) {
  @if (meta.type-of($input-shade) == string) {
    $input-shade: wtk.get("color-shade", $input-shade);
  }

  @if ($input-shade == 0%) {
    @return $color-value;
  } @else if (meta.type-of($input-shade) == number) {
    $input-shade: math.clamp(-100%, $input-shade, 100%);
  } @else {
    @error "Unable to parse shade from #{$input-shade}.";
  }

  $mixing-color: var(--color-darkener);

  @if ($input-shade > 0%) {
    $mixing-color: var(--color-lightener);
  }

  @return color-mix(in $color-space, $color-value math.abs($input-shade));
}

@function extract-color-name($input-string) {
  $color-name: null;

  @if (is-css-var-a-theme-color($input-string)) {
    $css-var-name: tools.extract-css-var-name($input-string);
    $color-name: string.slice($css-var-name, 7);
  } @else if (meta.type-of($input-string) == string) {
    $color-name: validate-color-name($input-string);
  }

  @if ($color-name == null) {
    @error "Unable to extract color name from #{$input-string}.";
  }

  @return $color-name;
}

@function get-color($color-value, $input-shade: 0%, $input-alpha: 1) {
  @if (is-color-mix($color-value) == false) {
    $color-value: validate-color-value($color-value);
  }

  $color-value: change-color-shade($color-value, $input-shade);
  $color-value: change-color-alpha($color-value, $input-alpha);

  @return $color-value;
}

@function is-color-mix($input-value) {
  @if (meta.type-of($input-value) != string) {
    @return false;
  } @else {
    @return string.index($input-value, "color-mix(") == 1;
  }
}

@function is-css-var-a-theme-color($css-var) {
  @if (tools.is-css-var($css-var) == false) {
    @return false;
  }

  $css-var-name: tools.extract-css-var-name($css-var);

  @return string.index($css-var-name, "color-") == 1;
}

@function validate-color-name($input-string) {
  @if (meta.type-of($input-string) != string) {
    @error "Color name must be a string.";
  }

  @return string.to-lower-case(tools.remove-whitespaces($input-string));
}

@function validate-color-value($input-value) {
  @if (meta.type-of($input-value) == color) {
    @return $input-value;
  } @else if (meta.type-of($input-value) == string) {
    $color-name: extract-color-name($input-value);

    @return var(--color-#{$color-name});
  } @else {
    @error "Unable to parse color value from #{$input-value}.";
  }
}

@function validate-color-value-text(
  $main-color-value,
  $text-color-value: null
) {
  @if (meta.type-of($text-color-value) == string) {
    $text-color-name: extract-color-name($text-color-value);
    $text-color-value: var(--color-#{$text-color-name});
  } @else if (meta.type-of($text-color-value) != color) {
    @if (is-css-var-a-theme-color($main-color-value)) {
      $main-color-name: extract-color-name($main-color-value);
      $text-color-value: var(--color-#{$main-color-name}--text);
    } @else {
      @if (chroma.is-color-dark($main-color-value)) {
        $text-color-value: var(--color-text-light);
      } @else {
        $text-color-value: var(--color-text-dark);
      }
    }
  } @else {
    $text-color-value: currentColor;
  }

  @return $text-color-value;
}

@mixin add-color(
  $color-name,
  $main-color-value,
  $text-color-value: null,
  $override-reserved-color: false
) {
  $color-name: validate-color-name($color-name);
  $main-color-value: validate-color-value($main-color-value);
  $text-color-value: validate-color-value-text(
    $main-color-value,
    $text-color-value
  );

  @if (
    list.index($reserved-color-names, $color-name) !=
      null and
      $override-reserved-color ==
      false
  ) {
    @error "#{$color-name} is a reserved color name.";
  }

  --color-#{$color-name}: #{$main-color-value};
  --color-#{$color-name}--text: #{$text-color-value};
}

@mixin set-color-property($color-property, $color-value) {
  @if (list.index($color-properties, $color-property) == null) {
    @error "Unrecognized or unsupported color property.";
  }

  $color-value: validate-color-value($color-value);

  --color-#{$color-property}: #{$color-value};

  @if ($color-property == "background") {
    $color-value-text: validate-color-value-text($color-value);

    --color-text: #{$color-value-text};

    background-color: $color-value;
    color: $color-value-text;
  } @else if ($color-property == "text") {
    color: $color-value;
  } @else if ($color-property != "shadow") {
    #{$color-property}-color: $color-value;
  }
}

@mixin use-color-classes($color-name, $input-properties...) {
  @each $color-property in $color-properties {
    $color-property-is-requested: list.length($input-properties) ==
      0 or
      list.index($input-properties, $color-property) !=
      null;

    @if ($color-property-is-requested) {
      .#{$color-property}-color-#{$color-name} {
        @include set-color-property($color-property, $color-name);
      }
    }
  }
}
