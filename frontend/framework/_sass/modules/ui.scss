@use "./tools.scss";
@use "../wtk.scss";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

$screen-queries-aliases: (
  ("equal", "="): width,
  ("after", ">"): min-width,
  ("before", "<"): max-width,
);

@function parse-screen-width($input-value) {
  @if (tools.is-of-type($input-value, size) == false) {
    $input-value: wtk.get("screen-width-breakpoints", $input-value);
  }

  $input-value-unit: math.unit($input-value);
  $input-value: math.div($input-value, $input-value * 0 + 1);

  @if ($input-value-unit == px) {
    @return math.div($input-value, 16) * 1em;
  } @else if ($input-value-unit == em or $input-value-unit == rem) {
    @return $input-value * 1em;
  } @else {
    @error "Unable to parse screen width from #{$input-value}.";
  }
}

@function parse-screen-query($input-value) {
  $search-result: tools.find-in-map($screen-queries-aliases, $input-value);

  @if ($search-result != null) {
    @return map.get($search-result, "value");
  } @else if (meta.type-of($input-value) == string) {
    @return $input-value;
  } @else {
    @error "Unable to parse screen query from #{$input-value}.";
  }
}

@mixin respond-to-hover() {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
}

@mixin respond-to-pointer() {
  @media (pointer: fine) {
    @content;
  }
}

@mixin respond-to-screen-width($screen-width, $screen-query: "after") {
  $screen-width: parse-screen-width($screen-width);
  $screen-query: parse-screen-query($screen-query);

  @media screen and (#{$screen-query}: #{$screen-width}) {
    @content;
  }
}

@mixin set-visibility($visibility-type) {
  @if ($visibility-type == "invisible") {
    visibility: hidden !important;
  } @else if ($visibility-type == "hidden") {
    position: fixed !important;
    right: -200% !important;
  } @else if ($visibility-type == "removed") {
    display: none !important;
  } @else {
    @error "Unrecognized visibility type.";
  }
}
