@use "./tools.scss";
@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

$luminance-channel-multipliers: (
  "red": 0.2126,
  "green": 0.7152,
  "blue": 0.0722,
);
$average-luminance-range: (0.45, 0.55);
$optimal-contrast-range: (4.5, 7);

@function choose-color-with-best-contrast($input-color, $color-candidates...) {
  $color-candidates: tools.get-list-from-arglist($color-candidates);
  $higher-contrast-found: 0;
  $output-color: $input-color;

  @each $color-candidate in $color-candidates {
    @if (meta.type-of($color-candidate) == color) {
      $contrast: get-contrast($input-color, $color-candidate);

      @if ($contrast > $higher-contrast-found) {
        $higher-contrast-found: $contrast;
        $output-color: $color-candidate;
      }
    }
  }

  @return $output-color;
}

@function get-contrast($input-color-1, $input-color-2) {
  $input-color-1-luminance: get-luminance($input-color-1);
  $input-color-2-luminance: get-luminance($input-color-2);
  $higher-luminance: $input-color-1-luminance;
  $lower-luminance: $input-color-2-luminance;

  @if ($input-color-2-luminance > $input-color-1-luminance) {
    $higher-luminance: $input-color-2-luminance;
    $lower-luminance: $input-color-1-luminance;
  }

  $contrast: math.div($higher-luminance + 0.05, $lower-luminance + 0.05);

  @return $contrast;
}

@function get-luminance($input-color) {
  $input-color-channels: (
    "red": color.red($input-color),
    "green": color.green($input-color),
    "blue": color.blue($input-color),
  );
  $luminance: 0;

  @each $channel-name, $channel-value in $input-color-channels {
    $channel-value: math.div($channel-value, 255);

    @if ($channel-value < 0.03928) {
      $channel-value: math.div($channel-value, 12.92);
    } @else {
      $channel-value: math.pow(math.div($channel-value + 0.055, 1.055), 2.4);
    }

    $channel-multiplier: map.get($luminance-channel-multipliers, $channel-name);
    $luminance: $luminance + $channel-value * $channel-multiplier;
  }

  @return $luminance;
}

@function is-color-dark($input-color) {
  $tests-passed: 0;

  @if (color.lightness($input-color) < 50%) {
    $tests-passed: $tests-passed + 1;
  }

  @if (get-luminance($input-color) < 0.5) {
    $tests-passed: $tests-passed + 1;
  }

  @if (get-contrast($input-color, #fff) > get-contrast($input-color, #000)) {
    $tests-passed: $tests-passed + 1;
  }

  @return $tests-passed >= 2;
}

@function is-color-light($input-color) {
  @return is-color-dark($input-color) == false;
}

@function is-contrast-high($input-color-1, $input-color-2) {
  $contrast: get-contrast($input-color-1, $input-color-2);
  $optimal-contrast-higher-end: list.nth($optimal-contrast-range, 2);

  @return $contrast > $optimal-contrast-higher-end;
}

@function is-contrast-low($input-color-1, $input-color-2) {
  $contrast: get-contrast($input-color-1, $input-color-2);
  $optimal-contrast-lower-end: list.nth($optimal-contrast-range, 1);

  @return $contrast < $optimal-contrast-lower-end;
}

@function is-contrast-optimal($input-color-1, $input-color-2) {
  $contrast: get-contrast($input-color-1, $input-color-2);
  $optimal-contrast-lower-end: list.nth($optimal-contrast-range, 1);
  $optimal-contrast-higher-end: list.nth($optimal-contrast-range, 2);

  @return $contrast >= $optimal-contrast-lower-end and $contrast <=
    $optimal-contrast-higher-end;
}

@function is-luminance-average($input-color) {
  $luminance: get-luminance($input-color);
  $average-luminance-lower-end: list.nth($average-luminance-range, 1);
  $average-luminance-higher-end: list.nth($average-luminance-range, 2);

  @return $luminance >= $average-luminance-lower-end and $luminance <=
    $average-luminance-higher-end;
}
