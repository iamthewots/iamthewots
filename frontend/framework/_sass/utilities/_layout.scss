@use "../modules/tools.scss";
@use "../wtk.scss";
@use "sass:list";
@use "sass:map";

.position-relative {
  position: relative;
}

$positioning-map: (
  "x": (
    "left": flex-start start,
    "right": flex-end end,
    "center": center center,
  ),
  "y": (
    "top": flex-start start,
    "bottom": flex-end end,
    "center": center center,
  ),
);

@each $display in block, flex, grid, inline-block, inline-flex, inline-grid {
  .#{$display} {
    display: $display;
  }

  @if ($display == flex or $display == grid) {
    @each $align-key, $align-value in map.get($positioning-map, "y") {
      @each $justify-key, $justify-value in map.get($positioning-map, "x") {
        .#{$display}-#{$align-key}-#{$justify-key} {
          @if ($display == flex) {
            align-items: list.nth($align-value, 1);
            justify-content: list.nth($justify-value, 1);
          } @else {
            align-items: list.nth($align-value, 2);
            justify-items: list.nth($justify-value, 2);
          }

          display: $display;
        }
      }
    }
  }
}

.flex-grow {
  @for $i from 1 through 4 {
    --flex-grow: #{$i};

    flex-grow: $i;
  }
}

@each $flex-wrap in wrap, nowrap, wrap-reverse {
  .flex-#{$flex-wrap} {
    --flex-wrap: #{$flex-wrap};

    flex-wrap: $flex-wrap;
  }
}

.flex-custom-layout {
  --align-items: flex-start;
  --justify-content: flex-start;
  --layout-main-width: auto;
  --flex-grow: 1;
  --flex-wrap: wrap;

  align-items: var(--align-items);
  justify-content: var(--justify-content);
  flex-wrap: var(--flex-wrap);
  display: flex;

  & > * {
    flex-basis: var(--layout-main-width);
    flex-grow: var(--flex-grow);
    flex-shrink: 1;
  }
}

.flex-group-layout {
  --layout-main-width: 0;

  flex-wrap: wrap;
  display: flex;

  & > * {
    min-width: fit-content;
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: var(--layout-main-width);
  }
}

@each $grid-auto-flow in column, dense, row {
  .grid-auto-flow-#{$grid-auto-flow} {
    --grid-auto-flow: #{$grid-auto-flow};

    grid-auto-flow: $grid-auto-flow;
  }
}

@each $grid-repeat-function in auto-fill, auto-fit {
  .grid-repeat-function-#{$grid-repeat-function} {
    --grid-repeat-function: #{$grid-repeat-function};
  }
}

.grid-content-layout {
  --gutter-width: calc(#{wtk.get("width", "main-content")} * 0.15);
  --layout-main-width: #{wtk.get("width", "main-content")};

  grid-template-columns:
    minmax(0, 1fr)
    minmax(0, var(--gutter-width))
    minmax(100%, var(--layout-main-width))
    minmax(0, var(--gutter-width))
    minmax(0, 1fr);
  display: grid;

  & > * {
    grid-column: 3/4;
  }

  $grid-column-map: (
    "gutters": "2/5",
    "left-gutter": "2/4",
    "right-gutter": "2/4",
    "full-width": "1/6",
    "left": "1/4",
    "right": "3/6",
  );

  @each $grid-column-key, $grid-column-value in $grid-column-map {
    & > ._extend-to-#{$grid-column-key} {
      grid-column: #{$grid-column-value};
    }
  }
}

.grid-rabbit-layout {
  --justify-content: center;
  grid-template-columns: auto minmax(0, 1fr);
  display: grid;

  & > *:nth-child(2) {
    justify-content: var(--justify-content);
    flex-direction: column;
    display: flex;
  }
}

.grid-sandwich-layout {
  grid-template-columns: minmax(0, 1fr);
  grid-template-rows: auto minmax(0, 1fr) auto;
  display: grid;
}

.grid-staggered-layout {
  --layout-main-width: calc(#{wtk.get("width", "main-content")} * 0.6);
  --layout-main-height: auto;
  --justify-self-odd: start;
  --justify-self-even: end;

  grid-auto-rows: var(--layout-main-height);
  grid-template-columns: minmax(0, 1fr);
  display: grid;

  & > * {
    width: 100%;
    max-width: var(--layout-main-width);

    &:nth-child(odd) {
      justify-self: var(--justify-self-odd);
    }

    &:nth-child(even) {
      justify-self: var(--justify-self-even);
    }
  }
}

.center-content {
  place-items: center;
  display: grid;
}

.centered-content {
  margin-left: auto;
  margin-right: auto;
}

@each $axis in "x", "y" {
  @each $keyset, $value in wtk.find-settings("spacing", true) {
    $margin: wtk.get("spacing", $keyset);

    @include tools.extend-selector-with-keyset(".spread-#{$axis}", $keyset) {
      & > *:not(:last-child) {
        @if ($axis == "x") {
          margin-right: $margin;
        } @else {
          margin-bottom: $margin;
        }
      }
    }
  }
}
