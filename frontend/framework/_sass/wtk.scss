@use "./_config";
@use "./modules/tools.scss";
@use "sass:map";
@use "sass:meta";

@function find-settings($settings-id, $return-value-only: false) {
  $settings: map.get(config.$settings, $settings-id);

  @if ($settings == null) {
    @error "No settings found with the id #{$settings-id}.";
  }

  @if ($return-value-only) {
    @return map.get($settings, "value");
  } @else {
    @return $settings;
  }
}

@function find-presets($presets-id, $query-value: null) {
  $presets: map.get(config.$presets, $presets-id);

  @if ($presets == null) {
    @error "No presets found with the id #{$presets-id}.";
  } @else if ($query-value == null) {
    @return $presets;
  }

  $preset-value: map.get($presets, $query-value);

  @if ($preset-value != null) {
    @return $preset-value;
  } @else {
    @error "No preset found in #{$presets-id} for #{$query-value}.";
  }
}

@function get-settings-parameter($settings-id, $parameter-key) {
  $settings: find-settings($settings-id);
  $output-value: map.get($settings, $parameter-key);

  @if ($output-value != null) {
    @return $output-value;
  }

  @if ($parameter-key == "do-not-compile-css-vars") {
    @return false;
  } @else if ($parameter-key == "key-separator") {
    @return "-";
  } @else if ($parameter-key == "name") {
    @return $settings-id;
  }

  @return null;
}

@function get($settings-id, $query-value: null) {
  $settings: find-settings($settings-id);
  $settings-value: map.get($settings, "value");

  @if (meta.type-of($settings-value) != map) {
    @return $settings-value;
  } @else if ($query-value == null) {
    $settings-default: get-settings-parameter($settings-id, "default");

    @if ($settings-default != null) {
      @return $settings-default;
    } @else {
      @error "No default value found for #{$settings-id}.";
    }
  }

  $output-value: $query-value;
  $search-result: tools.find-in-map($settings-value, $query-value);

  @if ($search-result == null) {
    @if (tools.is-css-var($query-value) == false) {
      $settings-allow: get-settings-parameter($settings-id, "allow");

      @if ($settings-allow == null) {
        @error "Value not found. External values not allowed for #{$settings-id}.";
      } @else {
        $allow-query-value-as-fallback: false;

        @each $type in $settings-allow {
          @if (tools.is-of-type($query-value, $type)) {
            $allow-query-value-as-fallback: true;
          }
        }

        @if ($allow-query-value-as-fallback == false) {
          @error "Value not found. External value type not allowed for #{$settings-id}.";
        }
      }
    }
  } @else if ($search-result != null) {
    @if (get-settings-parameter($settings-id, "do-not-compile-css-vars")) {
      $output-value: map.get($search-result, "value");
    } @else {
      $css-var-name: get-settings-parameter($settings-id, "name");
      $key-separator: get-settings-parameter($settings-id, "key-separator");
      $main-key: map.get($search-result, "main-key");
      $output-value: var(--#{$css-var-name}#{$key-separator}#{$main-key});
    }
  }

  $settings-multiplier: get-settings-parameter($settings-id, "multiplier");

  @if ($settings-multiplier != null) {
    $output-value: calc($output-value * $settings-multiplier);
  }

  @return $output-value;
}
